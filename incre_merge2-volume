#!/usr/bin/sh

infinishell='/usr/bin/infinishell'
infinihost='/usr/bin/infinihost'

ts=`date +%H%M%d%m%Y`
init=".init"
use_cred_file="NO"


check_fs_mounted() {
dir=$1
if [ `stat -c%d "$dir"` != `stat -c%d "$dir/.."` ]; then
	# FS Mounted
	$print_cmd 1
	else
	$print_cmd 0
	fi

}
write_enable_snap() {
    snap=$1
    run_infinishell "fs.snap.write_enable snap=$snap"
}
run_infinihost() {
	use_sudo=$1
	shift
	command=$@
	cmd="$command --system=$ibox"
	if [ "$use_sudo" == "sudo" ] ; then
		mode="sudo"
	else
		mode=""
	fi

	eval "$mode $infinihost $cmd"
	if [ $? -ne 0 ] ;then
		echo "infinihost command failed, aborting"
		exit 3
	fi
}

run_infinishell() {
	command=$@
	cmd="$infinishell $ibox -c \"$command\" $creds --csv --no-paging --yes"
	eval $cmd
	if [ $? -ne 0 ] ;then
		echo "infinishell command failed, aborting"
		exit 2
	fi
}
create_snap() {
	volume=$1
	lock=$2
	volume_name=${target_prefix}_${volume}
	snap_name=${snap_prefix}_${volume}_${ts}
    run_infinihost sudo snapshot create ${volume_name}  ${snap_name}
	if [ $lock == "YES" ] ; then
		run_infinishell "vol.snap.secure_lock snap=${snap_name} lock_duration=${retention}days"
	fi
	set_metadata ${snap_name} host.created_by infinimerge
	if [ "$set_retention" == "YES" ]; then
	    set_metadata ${snap_name} retention ${retention}
	fi
}

set_metadata() {
    volume=$1
    key=$2
    value=$3
    run_infinishell "metadata.set objtype=vol-snap object=$volume key=$key value=$value"
}

list_snaps() {
	volume=$1
	volume_name=${target_prefix}_${volume}
	run_infinishell "vol.snap.query source=$volume_name --grep=$snap_prefix --columns=created_at,name,lock_state --sort=-created_at"
}
	
	
validates() {
	if [ ! -d $expose_dir ] ; then
		echo "ERROR - Expose directory $expose_dir does not exist; aborting"
		exit 1
	fi
	if [ ! -d $target_dir ] ;then 
		echo "ERROR - Target directory $target_dir does not exist; aborting"
		exit 4
	fi
	target_mounted=`check_fs_mounted $target_dir`
	if [ $target_mounted -ne 1 ] ; then
		echo "ERROR - Target directory $target_dir is not mounted ; aborting"
		exit 5
	fi

	if [ ! -f "$init" -a "$use_cred_file" == "YES" ] ; then
		echo "ERROR - No credentials file ; aborting"
		exit 3
	fi
	d=`fuser $target_dir 2>/dev/null`
	if [ ! -z $d ]; then
    		echo "WARNING - open files on $target_dir"
	fi
	run_infinishell "pool.query pool=${pool} --columns=name,physical_total,physical_allocated,state,data_reduction "
	pool_usage=`run_infinishell "pool.query name=${pool} --columns=physical_total,physical_allocated unit=block --grep=block" | sed 's/blocks//g' | awk -F, '{print ($2/$1)*100}'` 
	pu=${pool_usage%.*}
	if [ $pu -gt $pool_threshold ] ; then
	   $print_cmd "WARNING Pool usage $pool_usage percent which exceeds the threshold of $pool_threshold"
	fi
	echo "validation completed"
}

expose() {
	snap=$1
	snap_name=${snap}_EXPOSED
    mount_dir=${expose_dir}/${snap_name}
    run_infinihost sudo "snapshot expose ${snap} --mount=${mount_dir} --name=${snap_name} --yes"
	echo " please run \"rman catalog start with '${mount_dir}' \" to update RMAN catalog with the location of the new restore path. Then you can run the restore command (rman switch to copy)Â  and recover the database."
	
}
unexpose() {
    echo "Please approve unexpose - snapshot will be deleted Y|[N]"
    read answer
    if [ "$answer" != "Y" -a "$answer" != "y" ] ; then
        echo "Operation aborted"
        exit 9
    fi
    
    snap=$1
    snap_name=${snap}_EXPOSED
    echo "snap is ${snap_name}"
    run_infinihost sudo volume unmap ${snap_name} --yes
    run_infinihost sudo snapshot delete ${snap_name} --yes
}



#validates

