#!/usr/bin/sh
infinishell='/usr/bin/infinishell'
ts=`date +%H%M%d%m%Y`

#os-specific start
if [ "$os" == "SunOS" ] ; then
	os_mount_options="-F nfs -o rw,bg,hard,nointr,rsize=32768,wsize=32768,proto=tcp,actimeo=0,vers=3,timeo=600,llock"
	os_awk=`which nawk`
elif [ "$os" == "Linux" ] ; then
	os_mount_options="-o rw,bg,hard,nointr,rsize=32768,wsize=32768,tcp,actimeo=0,vers=3,timeo=600,nolock"
	os_awk=`which awk`
elif [ "$os" == "AIX" ] ; then	
	os_mount_options="-o cio,rw,bg,hard,nointr,rsize=32768,wsize=32768,proto=tcp,noac,vers=3,timeo=600,nolock"
	os_awk=`which awk`
fi
#os-specific end

check_fs_mounted() 
{
dir=$1

if [ `stat -c%d "$dir"` != `stat -c%d "$dir/.."` ]; then


# FS Mounted
	$print_cmd 1
	else
	$print_cmd 0
	fi
}

write_enable_snap() 
{
	snap=$1
	run_infinishell "fs.snap.write_enable snap=$snap"
}

run_infinishell() 
{
	set -o pipefail
	command=$@
	cmd="$infinishell -c \"$command\"  --csv --no-paging --yes"
	eval $cmd 2>&1 | tee -a ${log}
	if [ $? -ne 0 ] ;then
		echo "infinishell command failed, aborting" | tee -a ${log}
		set +o pipefail
		exit 2
	fi
}

create_snap() 
{
	fs=$1
	lock=$2
	fs_name=${target_prefix}_${fs}
	operation=$2
	if [ "$operation" == "expose" ] ; then
		suffix=''
		snap_name=${fs}_EXPOSED
		fs_name=$fs
	else
		if [ $lock == "YES" ] ; then
		suffix="lock_duration=${retention}days" ;
		fi
		snap_name=${snap_prefix}_${fs}_${ts}
	fi
	run_infinishell "fs.snap.create fs=$fs_name name=${snap_name} $suffix"
	set_metadata ${snap_name} host.created_by infinimerge
	if [ "$set_retention" == "YES" ]; then
		set_metadata ${snap_name} retention ${retention}
	fi
}

set_metadata() 
{
	fs=$1
	key=$2
	value=$3
	run_infinishell "metadata.set objtype=fs-snap object=$fs key=$key value=$value"
}

delete_snap() 
{
	snap=$1
	run_infinishell "fs.snap.delete  snap=$snap --yes"
}

list_snaps() 
{
	fs=$1
	fs_name=${target_prefix}_${fs}
	run_infinishell "fs.snap.query source=$fs_name --grep=$snap_prefix --columns=created_at,name,lock_state --sort=-created_at"
}
		
validates() 
{
	if [ ! -d $expose_dir ] ; then
		echo "ERROR - Expose directory $expose_dir does not exist; aborting" | tee -a ${log}
		exit 1
	fi
	if [ ! -d $target_dir ] ;then 
		echo "ERROR - Target directory $target_dir does not exist; aborting" | tee -a ${log}
		exit 4
	fi
	target_mounted=`check_fs_mounted $target_dir`
	if [ $target_mounted -ne 1 ] ; then
		echo "ERROR - Target directory $target_dir is not mounted ; aborting" | tee -a ${log}
		exit 5
	fi

	#start tests
	current_mount_point=`df -P |grep $target_dir | awk '{ print $1 }'`
	current_nfs_ip=`df -P |grep $target_dir | awk -F':' '{print $1}'`
	ibox_nfs_ip_exists=`run_infinishell "config.net_space.ip.query --grep=$current_nfs_ip" | wc -l`;
	current_fs=`df -P |grep $target_dir | $os_awk -F ':/| ' '{print $2}'`
	ibox_fs_exists=`run_infinishell  "fs.export.query fs=$current_fs export_path=/$current_fs" | wc -l`;
	ORA_SID=`echo $ORACLE_SID`
	echo "Mounted  NFS target = $current_mount_point"
	echo "Expected NFS target = "$nfs_ip:/$target_prefix"_"$ORA_SID""
	#echo "NFS IP listed in config file = $nfs_ip"
	#echo "Mounted  NFS IP = $current_nfs_ip"
	#echo "Currently mounted target FS = $current_fs"
	#echo "ORA_SID=$ORA_SID"
	#echo "Using $os_awk" | tee -a ${log}
	#echo "ibox_fs_exists=$ibox_fs_exists"
	#echo "ibox_nfs_ip_exists=$ibox_nfs_ip_exists"
	if [ $ibox_nfs_ip_exists \!= 1 ]; then
		$print_cmd "ERROR - Currently used NFS target ($current_nfs_ip) is not mounted against the correct InfiniBox IP; aborting \n" | tee -a ${log}
		exit 101
	fi	
	if [ $nfs_ip \!= $current_nfs_ip ] ; then
		$print_cmd "ERROR - NFS IP listed in config file ($nfs_ip) differs from the IP cirrently used ($current_nfs_ip); aborting \n" | tee -a ${log}
		exit 102
	fi
	if [ $ibox_fs_exists \!= 2 ]; then
		$print_cmd "ERROR - Currently mounted NFS target $current_mount_point differs from the target InfiniBox FS export; aborting \n" | tee -a ${log}
		exit 103
	fi
	if [ $current_fs \!= "$target_prefix"_"$ORA_SID" ] ; then 
		$print_cmd "ERROR - Currently mounted NFS target $current_mount_point is not mounted against the backup target of the corresponding instance $ORA_SID ; aborting \n" | tee -a ${log}
		exit 104
	fi	
	#end tests

	d=`fuser $target_dir 2>/dev/null`
	if [ ! -z $d ]; then
    	echo "WARNING - open files on $target_dir" | tee -a ${log}
	fi
	run_infinishell "pool.query pool=${pool} --columns=name,physical_total,physical_allocated,state,data_reduction "
	pool_usage=`run_infinishell "pool.query name=${pool} --columns=physical_total,physical_allocated unit=block --grep=block" | sed 's/blocks//g' | awk -F, '{print ($2/$1)*100}'` 
	pu=${pool_usage%.*}
	if [[ $pu -gt $pool_threshold ]] ; then
		$print_cmd "WARNING Pool usage $pool_usage percent which exceeds the threshold of $pool_threshold \n" | tee -a ${log}
	fi
	echo "Validation completed" | tee -a ${log}
}

create_delete_export() 
{
	snap=$1
	operation=$2
	suffix=''
	if [ "$operation" == "delete" ] ; then
		run_infinishell "fs.export.${operation} export_path=/${snap} --yes"
	else
		run_infinishell "fs.export.${operation} fs=$snap export_path=/${snap} "
	fi
}

expose() 
{
	snap=$1
	echo "Attempt to expose... creating a snapshot for the backup target" | tee -a ${log}
	create_snap $snap expose
	create_delete_export ${snap}_EXPOSED create
	write_enable_snap ${snap}
	mount_umount_snap ${snap} mount
	echo "please run \"rman catalog start with '${mount_dir}' \" to update RMAN catalog with the location of the new restore path. Then you can run the restore command (rman switch to copy)Â  and recover the database." | tee -a ${log}	
}

unexpose() 
{
	echo "Please approve unexpose - snapshot will be deleted Y|[N]"
	read answer
	if [ "$answer" != "Y" -a "$answer" != "y" ] ; then
		echo "Operation aborted" | tee -a ${log}
		exit 9
	fi   
	snap=$1
	mount_umount_snap ${snap}_EXPOSED umount
	create_delete_export ${snap}_EXPOSED delete
	delete_snap ${snap} delete
}

mount_umount_snap() 
{
	export=$1
	operation=$2
	mount_dir=${expose_dir}/${export}
	if [ ! -d $mount_dir ] ; then 
		mkdir -p $mount_dir
		if [ $? -ne 0 ] ; then
			echo "unable to create mount directory" | tee -a ${log}
			exit 8
		fi
	fi

	if [ "$operation" == "mount" ] ; then
		echo "mounting ${export} on ${mount_dir}"
		$use_sudo mount $os_mount_options $nfs_ip:/${export} ${mount_dir} >> ${log} 2>&1	
		if [ $? -ne 0 ] ; then
			echo "unable to  mount directory" | tee -a ${log}
			exit 9
		fi
	fi
	if [ "$operation" == "umount" ] ; then
		echo "umounting $mount_dir"
		$use_sudo umount ${mount_dir} >> ${log} 2>&1
		if [ $? -ne 0 ] ; then
			echo "ERROR unable to umount $mount_dir; exiting" | tee -a ${log}
			exit 5
		fi    
	fi
}

